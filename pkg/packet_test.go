package pkg

import (
	"bytes"
	"testing"
)

func BenchmarkReatePacket_NewBuffer(b *testing.B) {
	buffer1 := []byte{0, 0, 10, 0}
	buffer2 := []byte{1, 0, 35, 0, 8, 1, 18, 6, 120, 105, 97, 111, 32, 65, 26, 7, 111, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 4, 103, 111, 103, 111, 8, 1, 18, 4, 99, 99, 99, 99, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 101, 101, 101, 101, 101, 50, 3, 102, 102, 102, 1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111}
	buffer3 := []byte{1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111}
	b.ResetTimer()
	for index := 0; index < b.N; index++ {
		buffer := bytes.NewBuffer(buffer1)
		buffer.Write(buffer2)
		buffer.Write(buffer3)
		// buffer.Bytes()
	}
}

func BenchmarkReatePacket_New_Byte(b *testing.B) {
	buffer1 := []byte{0, 0, 10, 0}
	buffer2 := []byte{1, 0, 35, 0, 8, 1, 18, 6, 120, 105, 97, 111, 32, 65, 26, 7, 111, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 4, 103, 111, 103, 111, 8, 1, 18, 4, 99, 99, 99, 99, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 101, 101, 101, 101, 101, 50, 3, 102, 102, 102, 1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111}
	buffer3 := []byte{1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 1, 0, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 0, 8, 1, 18, 6, 35, 105, 97, 111, 32, 65, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111, 103, 10, 8, 1, 18, 4, 99, 25, 99, 9, 26, 4, 100, 100, 100, 100, 32, 88, 42, 5, 1, 101, 101, 1, 101, 5, 3, 102, 102, 102, 26, 7, 100, 110, 32, 99, 97, 108, 108, 32, 28, 42, 6, 100, 101, 98, 117, 103, 51, 50, 40, 103, 111}
	b.ResetTimer()
	for index := 0; index < b.N; index++ {
		lenBuf1 := len(buffer1)
		lenBuf2 := len(buffer2)
		lenBuf3 := len(buffer3)
		lenAll := lenBuf1 + lenBuf2 + lenBuf3
		buffer := make([]byte, lenAll)
		copy(buffer[:lenBuf1], buffer1)
		copy(buffer[lenBuf1:lenBuf1+lenBuf2], buffer2)
		copy(buffer[lenBuf1+lenBuf2:], buffer3)
	}
}

func TestCreateSHeaderPacket(t *testing.T) {
	buffer := []byte{1, 0, 0, 0}
	res := createSHeaderPacket(REQUEST_RESPONSE, DISABLED, 0)
	if bytes.Compare(res, buffer) != 0 {
		t.Error("TestCreateSHeaderPacket FAIL")
	}
}

func TestCreateEHeader(t *testing.T) {
	buffer := []byte{8, 1, 18, 1, 50, 26, 1, 51, 32, 30, 42, 1, 53, 50, 6, 118, 49, 46, 48, 46, 48}
	externalHeader := &ExternalHeader{
		Status:        1,
		PacketID:      "2",
		TrackID:       "3",
		PayloadLength: 30,
		Routing:       "5",
		Version:       "v1.0.0",
	}
	res, err := createEHeader(externalHeader)
	if err != nil {
		t.Error("TestCreateEHeader FAIL")
	}
	if bytes.Compare(res, buffer) != 0 {
		t.Error("TestCreateSHeaderPacket-bytes.Compare FAIL")
	}
}

func TestCreatePacket(t *testing.T) {
	buffer := []byte{6, 0, 21, 0, 8, 1, 18, 1, 50, 26, 1, 51, 32, 30, 42, 1, 53, 50, 6, 118, 49, 46, 48, 46, 48, 8, 7, 18, 3, 50, 52, 52, 26, 3, 51, 103, 103, 32, 30, 42, 4, 53, 97, 97, 97, 50, 6, 118, 49, 46, 48, 46, 48}
	sHeader := createSHeaderPacket(CONNECT_CONNACK, DISABLED, 21)
	eHeader := &ExternalHeader{
		Status:        1,
		PacketID:      "2",
		TrackID:       "3",
		PayloadLength: 30,
		Routing:       "5",
		Version:       "v1.0.0",
	}
	bufferEHeader, err := createEHeader(eHeader)
	if err != nil {
		t.Error("TestCreateEHeader FAIL")
	}
	forkPayload := &ExternalHeader{
		Status:        7,
		PacketID:      "244",
		TrackID:       "3gg",
		PayloadLength: 30,
		Routing:       "5aaa",
		Version:       "v1.0.0",
	}
	bufferForkPayload, err := createEHeader(forkPayload)
	if err != nil {
		t.Error("TestCreateEHeader FAIL")
	}
	res := createPacket(sHeader, bufferEHeader, bufferForkPayload)
	if bytes.Compare(res, buffer) != 0 {
		t.Error("TestCreatePacket FAIL")
	}
}

func TestReadOpCode(t *testing.T) {
	rawBuffer := []byte{6, 0, 21, 0, 8, 1, 18, 1, 50, 26, 1, 51, 32, 30, 42, 1, 53, 50, 6, 118, 49, 46, 48, 46, 48, 8, 7, 18, 3, 50, 52, 52, 26, 3, 51, 103, 103, 32, 30, 42, 4, 53, 97, 97, 97, 50, 6, 118, 49, 46, 48, 46, 48}
	packet := &Packet{}
	packet.Init(rawBuffer)
	if packet.ReadOpCode() != 6 {
		t.Error("ReadOpCode FAIL")
	}
}

func TestReadTrackEnabled(t *testing.T) {
	rawBuffer := []byte{6, 0, 21, 0, 8, 1, 18, 1, 50, 26, 1, 51, 32, 30, 42, 1, 53, 50, 6, 118, 49, 46, 48, 46, 48, 8, 7, 18, 3, 50, 52, 52, 26, 3, 51, 103, 103, 32, 30, 42, 4, 53, 97, 97, 97, 50, 6, 118, 49, 46, 48, 46, 48}
	packet := &Packet{}
	packet.Init(rawBuffer)
	if packet.ReadTrackEnabled() != false {
		t.Error("ReadTrackEnabled FAIL")
	}
}

/**
{
    status: 1,
    packetID: '2',
    trackID: '3',
    payloadLength: 30,
    routing: '5',
    version: 'v1.0.0'
};
*/
func TestReadEHeaderLength(t *testing.T) {
	rawBuffer := []byte{6, 0, 10, 1, 8, 1, 18, 1, 50, 26, 1, 51, 32, 30, 42, 1, 53, 50, 6, 118, 49, 46, 48, 46, 48, 8, 7, 18, 3, 50, 52, 52, 26, 3, 51, 103, 103, 32, 30, 42, 4, 53, 97, 97, 97, 50, 6, 118, 49, 46, 48, 46, 48}
	packet := &Packet{}
	packet.Init(rawBuffer)
	if packet.ReadEHeaderLength() != 266 {
		t.Error("ReadEHeaderLength FAIL")
	}
}

/**
{
    status: 1,
    packetID: '2',
    trackID: '3',
    payloadLength: 30,
    routing: '5',
    version: 'v1.0.0'
};
*/
func TestReadEHeaderBuffer(t *testing.T) {
	rawBuffer := []byte{6, 0, 21, 0, 8, 1, 18, 1, 50, 26, 1, 51, 32, 30, 42, 1, 53, 50, 6, 118, 49, 46, 48, 46, 48, 8, 7, 18, 3, 50, 52, 52, 26, 3, 51, 103, 103, 32, 30, 42, 4, 53, 97, 97, 97, 50, 6, 118, 49, 46, 48, 46, 48}
	rawEHeaderBuffer := []byte{8, 1, 18, 1, 50, 26, 1, 51, 32, 30, 42, 1, 53, 50, 6, 118, 49, 46, 48, 46, 48}
	packet := &Packet{}
	packet.Init(rawBuffer)
	eHeaderBuffer := packet.ReadEHeaderBuffer()
	if bytes.Compare(rawEHeaderBuffer, eHeaderBuffer) != 0 {
		t.Error("ReadEHeaderBuffer FAIL")
	}
}

/**
{
    status: 1,
    packetID: '2',
    trackID: '3',
    payloadLength: 30,
    routing: '5',
    version: 'v1.0.0'
};
*/
func TestReadEPayloadBuffer(t *testing.T) {
	rawBuffer := []byte{6, 0, 21, 0, 8, 1, 18, 1, 50, 26, 1, 51, 32, 30, 42, 1, 53, 50, 6, 118, 49, 46, 48, 46, 48, 8, 7, 18, 3, 50, 52, 52, 26, 3, 51, 103, 103, 32, 30, 42, 4, 53, 97, 97, 97, 50, 6, 118, 49, 46, 48, 46, 48}
	rawEPayloadBuffer := []byte{8, 7, 18, 3, 50, 52, 52, 26, 3, 51, 103, 103, 32, 30, 42, 4, 53, 97, 97, 97, 50, 6, 118, 49, 46, 48, 46, 48}
	packet := &Packet{}
	packet.Init(rawBuffer)
	ePayloadBuffer := packet.ReadEPayloadBuffer()
	if bytes.Compare(rawEPayloadBuffer, ePayloadBuffer) != 0 {
		t.Error("ReadEPayloadBuffer FAIL")
	}
}

/**
{
    status: 1,
    packetID: '2',
    trackID: '3',
    payloadLength: 30,
    routing: '5',
    version: 'v1.0.0'
};
*/
func TestReadEHeaderPB(t *testing.T) {
	rawBuffer := []byte{6, 0, 21, 0, 8, 1, 18, 1, 50, 26, 1, 51, 32, 30, 42, 1, 53, 50, 6, 118, 49, 46, 48, 46, 48, 8, 7, 18, 3, 50, 52, 52, 26, 3, 51, 103, 103, 32, 30, 42, 4, 53, 97, 97, 97, 50, 6, 118, 49, 46, 48, 46, 48}
	packet := &Packet{}
	packet.Init(rawBuffer)
	eHeader, err := packet.ReadEHeaderPB()
	if err != nil {
		t.Error("ReadEHeaderPB-Unmarshal FAIL")
	}
	if eHeader.GetStatus() != 1 {
		t.Error("ReadEHeaderPB-GetStatus FAIL")
	}
	if eHeader.GetPacketID() != "2" {
		t.Error("ReadEHeaderPB-GetStatus FAIL")
	}
	if eHeader.GetTrackID() != "3" {
		t.Error("ReadEHeaderPB-GetStatus FAIL")
	}
	if eHeader.GetPayloadLength() != 30 {
		t.Error("ReadEHeaderPB-GetStatus FAIL")
	}
	if eHeader.GetRouting() != "5" {
		t.Error("ReadEHeaderPB-GetStatus FAIL")
	}
	if eHeader.GetVersion() != "v1.0.0" {
		t.Error("ReadEHeaderPB-GetStatus FAIL")
	}
}
